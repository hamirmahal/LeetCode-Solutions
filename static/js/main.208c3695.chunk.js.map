{"version":3,"sources":["logo.svg","problems/ReverseInteger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ReverseInteger","useState","integer","setInteger","reversedInteger","setReversedInteger","text","type","onChange","value","target","max","i","nextDigitToReverse","Math","trunc","reverse","App","className","src","logo","alt","component","path","to","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,0KCE5B,SAASC,IAAkB,IAAD,EACLC,mBAAS,IADJ,mBAC7BC,EAD6B,KACnBC,EADmB,OAEMF,qBAFN,mBAE9BG,EAF8B,KAEdC,EAFc,KAGjCC,EAAO,0CAmBX,OAlBAA,GAAQF,EAAoBE,GAAQ,IAkB3B,gCAAK,2BAAOC,KAAO,SACxBC,SAlBJ,YACC,IAAWC,EAAZ,EAD8BC,OAClBD,MAAkBN,EAAWM,GACrCJ,EACJ,SAAiBH,GACb,IAAMS,EAAM,UAC2BC,EAAI,EAC3C,KAAmB,IAAZV,GACP,CAAI,IAAIW,EAAqBX,EAAU,GAEnC,GADAA,EAAUY,KAAKC,MAAMb,EAAQ,IACzBU,EAAID,GAAOC,GAJP,UAKJ,MAAO,uBACX,GAAIA,IAAMD,GAAOE,EAAqB,EAClC,MAAO,uBACX,IARQ,YAQJD,GAAaC,GAAqB,EAClC,MAAO,uBACXD,GAAK,GAAKA,GAAKC,EACnB,OAAOD,EAdYI,CAAQP,KAgBEA,MAAOP,IACpC,6BAFK,IAEE,6BAFF,IAEUA,GAAWI,EAFrB,K,yCCEEW,MApBf,WACE,OACE,kBAAC,IAAD,KAAe,yBAAKC,UAAU,OAC5B,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAC1BG,IAAI,SACJ,kBAAC,IAAD,CAAOC,UAAWtB,EAClBuB,KAAK,sBAAsB,6BAC3B,kBAAC,IAAD,CAAMC,GAAG,KAAT,aAA6B,6BAC7B,kBAAC,IAAD,CAAMN,UAAU,OAAOM,GAAG,qBAA1B,6BACkC,6BAClC,uBAAGN,UAAU,WAAWO,KACxB,mDACAf,OAAO,SAASgB,IAAI,uBAFpB,+CCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.208c3695.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\n\r\nexport default function ReverseInteger() {\r\n    const [ integer , setInteger] = useState('');\r\n    const [reversedInteger,setReversedInteger]=useState();\r\n    let text = 'The reverse of the inputted integer is ';\r\n    text += reversedInteger;    text += '.';\r\n    function handleInputChange( { target } )\r\n    {   const { value } = target; setInteger(value);\r\n        setReversedInteger(reverse(value));        }\r\n    function reverse(integer)\r\n    {   const max = 214748364;\r\n        const min = 0 - max;               let i = 0;\r\n        while (integer !== 0)\r\n        {   let nextDigitToReverse = integer % 10;\r\n            integer = Math.trunc(integer/10);\r\n            if (i > max || i < min)\r\n                return 'too large to compute';\r\n            if (i === max && nextDigitToReverse > 7)\r\n                return 'too large to compute';\r\n            if (i === min && nextDigitToReverse <-8)\r\n                return 'too large to compute';\r\n            i *= 10;  i += nextDigitToReverse;     }\r\n        return i;                                   }\r\n    return ( <h1> <input type = 'number'\r\n        onChange={handleInputChange} value={integer}/>\r\n        <br /> <br /> {integer && text} </h1>);       }","import ReverseInteger from './problems/ReverseInteger';\nimport React from 'react';\nimport logo from './logo.svg';\nimport{BrowserRouter,Link,Route}from'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter><div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\"\n        alt=\"logo\" />\n        <Route component={ReverseInteger}\n        path=\"/7.ReverseInteger\" /><br />\n        <Link to=\"/\">Home Page</Link><br />\n        <Link className=\"Easy\" to=\"/7.ReverseInteger\">\n          7. Reverse Integer (easy)</Link><br />\n        <a className=\"App-link\" href=\n        \"https://github.com/hamirmahal/LeetCode-Solutions\"\n        target=\"_blank\" rel=\"noopener noreferrer\">\n        View the source code on Hamir's GitHub.</a>\n      </header>\n    </div></BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}